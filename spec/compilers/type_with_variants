type A {
  B(name : String, age : Number)
  C
}

component Main {
  fun render : String {
    case (A.B(name: "Joe", age: 32)) {
      A.B(name, age) => name
      A.C => ""
    }
  }
}
--------------------------------------------------------------------------------
import {
  patternVariable as H,
  newVariant as F,
  pattern as G,
  variant as B,
  match as E
} from "./runtime.js";

export const
  A = B([
    "name",
    "age"
  ]),
  C = B(0),
  D = () => {
    return E(F(A)(`Joe`, 32), [
      [
        G(A, [
          H,
          H
        ]),
        (a, b) => {
          return a
        }
      ],
      [
        G(C, []),
        () => {
          return ``
        }
      ]
    ])
  };
